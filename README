Author:   Austin Brennan
Email:    awbrenn@g.clemson.edu
Class:    CPSC 3220 - Levine
Due Date: October 27th, 2014

-------
tonemap
-------

Note on Project Lateness:
    - Durring an email exchange yesterday October 26th, Dr. Levine said I could
      turn this lab in today October 27th without penalty, so long as I only corrected an issue
      where I was using unsigned chars instead of floats.

    Here is a copy of his email addressed to me:

    Austin,

    I just looked at your code.  Why did you use UINT8 do read the data?  It's floating point data,
    so you're supposed to read it using TypeDesc::FLOAT.  If you read it as char and then divide by
    255, you will not actually read in the high dynamic range that is stored in the data.

    Otherwise, your algorithms look OK!  Feel free to resubmit in the next 24 hrs provided you make
    no other changes to the code other than you reading (and removing the extraneous /255 and cast)

    Regards,
    Dr. Levine

Program Description:
    The program takes an image and a filter specified by [filter].filt and calculates
    a convolution of the filter on the specified image.

Compilation:
    $> make

Use Cases:
    $> ./tonemap ['-c' or '-g' need to use one] gamma_value input.img

    - Displays the input image with tone map applied in an opengl window
    - Press 's' or 'S' to flip between a non tone mapped image and tone mapped image

    $> ./tonemap ['-c' or '-g' need to use one] gamma_value input.img output.img

    - same functionality as above except 'w' writes the image in the opengl
      window to output.img

Best Submitted Images:
    - The best images that i created can be found in the images folder. The two images are the following:
         - Best_Ocean_With_Simple_Tonemap.png
         - Best_SmallDesignCenter_With_Convolved_Tonemap.png

    - I used a gamma value of 0.45 for Best_Ocean_With_Simple_Tonemap.png
    - I used a gamma value of 0.15 for Best_SmallDesignCenter_With_Convolved_Tonemap.png
    - The images can be produced by following the use case description and using the corresponding
      gamma value

Description of flags:
    - Valid flag options are: [-g] for simple tonemap and [-c] which convolves the log-space
      luminance into a blurred channel and sharpened channel S,and recomposes them as gamma * B + S

Known Bugs:
    - N/A

Boundary Handling (for convolution of luminance map):
    - Sets luminance values that lie outside of the image boundaries to black.
      That is luminance = 0.0
    - This is handled in the calculateFilterMap.

Additional Information:
    - Nothing in the advanced section is implemented.